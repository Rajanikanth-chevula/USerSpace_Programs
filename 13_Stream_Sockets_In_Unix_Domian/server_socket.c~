/******************************************************************************
 * File:        server_socket.c
 *
 * Description: This program demonstrates a simple Unix domain socket server
 *              using the socket API. It creates a server socket, binds it to
 *              a Unix domain socket path, listens for incoming connections,
 *              accepts client connections, receives messages from clients,
 *              echoes the messages back to clients, and finally closes the
 *              server socket.
 *
 * Usage:	./server_socket.c
 *
 * Author:      Fidility Solutions.
 *  
 * Date:        01/03/2024
 *
 * Reference:   The Linux Programming Interface book.
 *
 ******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <string.h>
#include <ctype.h>
#define SOCKET_PATH "/tmp/stream_socket"
#define MAX_CLIENTS 10
/* Function: main
 *
 * Description: Entry point of the server program. Creates a Unix domain socket server,
 *              accepts client connections, receives and echoes messages from/to clients,
 *              and closes the server socket.
 *
 * Parameters:  None
 *
 * Return:      0 on successful execution, non-zero value on failure.
 */
int main() {
	printf("Welcome to client-server application that uses stream sockets in UNIX domain \n");

	/* variable declaration */
    	int server_socket, client_sockets[MAX_CLIENTS], num_clients = 0;

	/* declaration of strcture to represent address of various types of sockets */
    	struct sockaddr_un server_addr, client_addr;

	/*length of socket */
    	socklen_t client_addr_len = sizeof(client_addr);
    	char buffer[256];
    	/* Create A UNIX Domain stream server socket */
	printf("Server socket created using socket () sys call ...\n");
    	server_socket = socket(AF_UNIX, SOCK_STREAM, 0);
    	if (server_socket == -1) {
        	perror("socket");
        	exit(EXIT_FAILURE);
    	}

    	/* clearing the structure before use */
    	memset(&server_addr, 0, sizeof(server_addr));
   	/* Set up server address with socket family and path to the socket file in the file system */
    	server_addr.sun_family = AF_UNIX;
    	strncpy(server_addr.sun_path, SOCKET_PATH, sizeof(server_addr.sun_path) - 1);

    	/* Bind server socket to address */
	printf("Binding the server socket to its well known address ...\n");
    	if (bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr)) == -1) {
        	perror("bind");
        	exit(EXIT_FAILURE);
    	}

    	/* Listen incoming connection from other socket to connect */
	printf("The Server socket is ready to listen from client sockets ..\n");
    	if (listen(server_socket, MAX_CLIENTS) == -1) {
        	perror("listen");
        	exit(EXIT_FAILURE);
    	}

    	printf("Server is running...\n");

    	while (1) {
        	/* Accept incoming connection from other sockets*/
		printf("The Server socket is ready to accept incoming connection from other sockets...\n");
        	int client_socket = accept(server_socket, (struct sockaddr *)&client_addr, &client_addr_len);
        	if (client_socket == -1) {
           		perror("accept");
            		exit(EXIT_FAILURE);
        	}

        	printf("Client connected:%d\n", client_socket);

        	/* Receive and echo messages from/to the client */
        	ssize_t bytes_received;
        	while ((bytes_received = recv(client_socket, buffer, sizeof(buffer), 0)) > 0) {

            		/* Null-terminate received data to print as string */
            		buffer[bytes_received] = '\0';
            		printf("The Data received from client: %s\n", buffer);
			/* Processing Received data: Converting the message to uppercase */
    			for (int i = 0; i < strlen(buffer); i++) {
        			buffer[i] = toupper(buffer[i]);
    			}

    			/* Null-terminate the string */
    			buffer[bytes_received] = '\0';
			/* Echo back to client with uppercase letters to know the server received correct Data */
			printf("Sending back to client changing the letters to  uppercase letters...\n");
            		if (send(client_socket, buffer, bytes_received, 0) == -1) {
                		perror("send");
                		exit(EXIT_FAILURE);
            		}
        	}

		/*Client closed the connection */
        	if (bytes_received == 0) {
            		printf("Client disconnected.\n");
        	} 
		else {
            		perror("recv");
            		exit(EXIT_FAILURE);
        	}

        	/* If client Disconnected Close the client socket */ 
        	close(client_socket);
    	}

    	/* Close server socket */
    	close(server_socket);

    	/* Remove socket file */
    	unlink(SOCKET_PATH);

    	return 0;
}

